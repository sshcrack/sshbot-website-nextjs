import accounts from 'database/constructs/accounts';
import sessions from 'database/constructs/sessions';
import initializeDatabase from 'database/initialize';
import { NextApiRequest, NextApiResponse } from 'next';
import { getSession } from 'next-auth/client';
import { isNull } from 'utils/tools';
import fetch from "node-fetch"
import hat from "hat"


const handler = async (req: NextApiRequest, res: NextApiResponse) => {
  const conn = await initializeDatabase(hat());
  //@ts-ignore
  const session = await getSession({ req })
  if(isNull(session) || isNull(session?.accessToken)) return res.send({error: "No session"})
  const dbSession = await new sessions(conn, { where: { access_token: session.accessToken } }).get()
  if (isNull(dbSession)) return res.send({ error: "No Database entry found" })

  const dbAcc = await new accounts(conn, { where: { user_id: dbSession?.user_id } }).get()
  if(isNull(dbAcc)) return res.send({ error: "Account not found" })

  const discordObj: DiscordGuilds[] | RateLimit = await (await fetch(`https://discord.com/api/v8/users/@me/guilds`, {
    headers: {
      "Authorization": `Bearer ${dbAcc?.access_token}`
    }
  })).json()

  //@ts-ignore
  if (isNull(discordObj.map)) return res.send({ error: discordObj });

  const inGuilds = discordObj as DiscordGuilds[];

  const toFetch = `${process.env.BOT_URI}/permLevels?${inGuilds.map(value => `check[]=${value.id}`).join("&")}&member=${dbAcc?.provider_account_id}`

  const permLevels = await (await fetch(toFetch)).json()
  await conn.close()

  res.send({
    permLevels: permLevels,
    guilds: inGuilds
  });
}


// Generated by https://quicktype.io

export interface DiscordGuilds {
  id:          string;
  name:        string;
  icon:        null | string;
  owner:       boolean;
  permissions: string;
  features:    string[];
}

export interface RateLimit {
  global: boolean,
  message: string,
  retry_after: number
}

export default handler